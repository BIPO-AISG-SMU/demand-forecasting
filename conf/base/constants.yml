# This yml file is used primary for default configurations settings (fallback when parameters set in parameters.yml are invalid) and data schema related settings involving the key data features name which are used for processing related activities. They should only be changed in circumstances where data values or feature names has changed.


# Used for dataloader
default_date_col: "Date" #Assume date col name for all input dataset
default_propensity_factor_column: "Factor"
default_mkt_channels_column: "Mode"
default_mkt_cost_column: "Total Cost"
default_mkt_name_column: "Name"
default_mkt_date_start_end_columns: ["Date Start", "Date End"]
default_outlet_column: "CostCentreCode"
columns_to_construct_date:
    weather_data: ["Year", "Month", "Day"]
    marketing_data: ["Date Start", "Date End"]

# Used for data preprocessing
default_start_date: "2021-01-01" 
default_end_date: "2022-12-31"
default_revenue_column: "proxyrevenue" # Target column (lowercase due to dataloader column renaming)
default_const_value_perc_threshold: 0
default_outlets_exclusion_list: []

marketing_channel_list: ['tv_ad_daily_cost', 'radio_ad_daily_cost', 'instagram_ad_daily_cost', 'facebook_ad_daily_cost', 'youtube_ad_daily_cost','poster_campaign_daily_cost', 'digital_daily_cost']

# Fixed parameters
inference:
    # Used in data_preprocessing.py
    # logging_name: "inference" # see logging.yml
    inference_marketing_columns: [
            "campaign_name",
            "campaign_start_date",
            "campaign_end_date",
            "campaign_total_costs",
        ] # order is important
    campaign_column: "cat_mkt_campaign"
    campaign_count_column: "count_mkt_campaign"
    inference_lag_sales_columns: ["lag_sales"]
    inference_location_columns:
        [
            "location",
            "type",
            "propensity_factor",
            "is_raining",
            "max_temp",
            "is_public_holiday",
            "is_school_holiday",
        ]
    # Used in feature_enginerring.py
    inference_proxy_revenue_column: "proxy_revenue"
    # Used in model_specific_fe.py
    inference_columns_to_drop: ["cat_day_of_week", "cat_mkt_campaign"]
    ohe_columns_to_drop: ["location_East", "type_carry-out"]
    ohe_columns_to_add:
        [
            "location_East",
            "location_West",
            "location_North",
            "type_carry-out",
            "type_dine-in",
        ]
    column_order:
        [
            "cat_covid_group_size_cap",
            "location_North",
            "location_West",
            "type_dine-in",
            "temp_max",
            "lag_14_days_proxy_revenue",
            "count_mkt_campaign",
            "lag_2_week_mean_weekly_proxy_revenue",
            "cat_mkt_campaign_end",
            "is_raining",
            "propensity_factor",
            "is_public_holiday",
            "is_weekend",
            "is_school_holiday",
            "lag_9_days_proxy_revenue",
            "sma_window_8_days_proxy_revenue",
            "campaign_daily_cost",
            "cat_mkt_campaign_start",
            "is_having_campaign",
            "sma_window_7_days_proxy_revenue",
            "lag_1_week_mean_weekly_proxy_revenue",
        ]

general:
    target_feature: "proxy_revenue" # refer to dataloader new_column_names

dataloader:


    # columns_to_drop:
    #     weather_data: ["year", "month", "day", "station", "direction"] # Used for constructing date
    #     holiday_data: ["school holiday type", "public holiday type"]


    expected_columns:
        proxy_revenue_data:
            [
                "CostCentreCode",
                "Date",
                "ManHours",
                "ProxyRevenue",
                "Location",
                "Outlet",
                "Type",
            ]
        propensity_data: ["Location", "Factor"]
        marketing_data: ["Name", "Date Start", "Date End", "Mode" ,"Total Cost"]

        weather_data:
            [
                "DIRECTION",
                "Station",
                "Year",
                "Month",
                "Day",
                "Daily Rainfall Total (mm)",
                "Highest 30 min Rainfall (mm)",
                "Highest 60 min Rainfall (mm)",
                "Highest 120 min Rainfall (mm)",
                "Mean Temperature (°C)",
                "Maximum Temperature (°C)",
                "Minimum Temperature (°C)",
                "Mean Wind Speed (km/h)",
                "Max Wind Speed (km/h)",
            ]
        covid_capacity_data: ["Group size Cap "]
        holiday_data:
            [
                "Date",
                "School Holiday",
                "School Holiday Type",
                "Public Holiday",
                "Public Holiday Type",
                "Day",
            ]
        merged_df:
            [
                "cost_centre_code",
                "man_hours",
                "proxy_revenue",
                "location",
                "outlet",
                "type",
                "propensity_factor",
                "rain_day_mm",
                "rain_high_30min_mm",
                "rain_high_60min_mm",
                "rain_high_120min_mm",
                "temp_mean",
                "temp_max",
                "temp_min",
                "wind_mean_kmh",
                "wind_max_kmh",
                "cat_covid_group_size_cap",
                "is_school_holiday",
                "is_public_holiday",
                "cat_day_of_week",
            ]
        inference: [
                "location",
                "type",
                "propensity_factor",
                "is_raining",
                "max_temp",
                "is_public_holiday",
                "is_school_holiday",
                "campaign_name",
                "campaign_start_date",
                "campaign_end_date",
                "campaign_total_costs",
                "lag_sales",
            ]

data_preprocessing:
    # Features that must have non-negative values
    non_negative_exogeneous_columns:
        [
            "rain_day_mm",
            "rain_high_30min_mm",
            "rain_high_60min_mm",
            "rain_high_120min_mm",
            "temp_mean",
            "temp_max",
            "temp_min",
            "wind_mean_kmh",
            "wind_max_kmh",
            "proxy_revenue",
            "man_hours",
            "total_cost"
        ]
    # Features and its expected data types
    expected_dtypes:
        cost_centre_code: int64
        man_hours: float64
        proxy_revenue: float64
        location: object
        outlet: object
        type: object
        propensity_factor: float64
        rain_day_mm: float64
        rain_high_30min_mm: float64
        rain_high_60min_mm: float64
        rain_high_120min_mm: float64
        temp_mean: float64
        temp_max: float64
        temp_min: float64
        wind_mean_kmh: float64
        wind_max_kmh: float64
        cat_covid_group_size_cap: object
        is_school_holiday: bool
        is_public_holiday: bool
        cat_day_of_week: object
        # marketing dtypes
        campaign_name: str
        date_start: object
        date_end: object
        mode: str
        total_cost: float64

# Generate marketing columns.
default_marketing_channel_list: ['tv_ad_daily_cost', 'radio_ad_daily_cost', 'instagram_ad_daily_cost', 'facebook_ad_daily_cost', 'youtube_ad_daily_cost','poster_campaign_daily_cost', 'digital_daily_cost']

default_lightweightmmm_num_lags: 7

# Default configurations for train/val/test days in case of misconfiguration
data_split:
    training_days_default: 365
    validation_days_default: 0
    testing_days_default: 14
    window_sliding_stride_days_default: 90
    window_expansion_days_default: 90
    simple_split_fold_default: 1 # Defaults if simple_split chosen but invalid fold stated
    window_split_fold_default: 3 # Defaults if sliding/expanding_window chosen but invalid fold stated
    data_split_option_default: "simple_split" #Fallback defaults
    data_split_option_list: ["simple_split", "expanding_window", "sliding_window"]
    data_split_fold_default: 1

# Defaults for model_specific_preprocessing module and validity values
modeling:
    training_testing_mode_default: "training"
    valid_training_testing_modes: ["training","testing"]
    model_name_default: "ebm"
    valid_model_name: ["ordered_model", "ebm"]
    ebm:
        outer_bags: 10
        inner_bags:  0
        learning_rate: 0.01
        interactions: 0
        max_leaves: 3
        min_samples_leaf: 2
        max_bins: 256

    ordered_model:
        const_col_artefacts_path: "data/06_model_specific_preprocessing/ordered_model.pkl"
        distr: "probit"
        method: "bfgs"
        max_iter: 2

inference:
    marketing_filepath: "data/08_model_inference_output/inference_mkt_data/inference_mkt_data.csv"
    lag_sales_filepath: "data/08_model_inference_output/inference_lag_sales_data/inference_lag_sales_data.csv"
    outlet_filepath: "data/08_model_inference_output/inference_outlet_data/inference_outlet_data.csv"
    lag_sales_partition_filepath: "data/08_model_inference_output/inference_lag_sales_data"
    # artefacts 
    tsfresh_relevant_features_filepath: "data/05_feature_engineering/tsfresh_features/tsfresh_relevant_features"
    lightweightmmm_params_filepath: "data/05_feature_engineering/lightweightmmm_features/artefacts"
    std_norm_filepath: "data/08_model_inference_output/std_norm_artefact"
    encoding_filepath: "data/08_model_inference_output/encoding_artefact"