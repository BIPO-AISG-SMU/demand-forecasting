# Config file for pipeline use. When defining directory via relative path, please take reference on where the python script is executed based on the current working directory which is located. 

# Handles discretization for various features
general:
    bin_labels_list: ["1","2","3","4"]


#Module
data_loader:
    # Adjustable parameters
    transaction_file: "outlet_AZ_and_Z_transaction_revenue.xlsx"
    propensity_file: "consumer propensity to spend.xlsx"
    marketing_file: "marketing.xlsx"
    climate_record_file: "SG climate records 2021 - 2022.xlsx"
    covid_record_file: "covid capcacity.xlsx"
    holiday_data_file: "holiday_df.xlsx"
    tourism_data_file: "Tourism_IVA_2020_to_2022.xlsx"
    outlet_region_mapping_file: "outlet_region_mapping.csv"
    outlet_name: ["AZ","Z"]
    marketing_sheet: "Campaign"
    date_range: ["2021-01-01","2022-12-31"]
    days_to_end_campaign: 90
    
    # Fixed parameters
    data_source_dir: ["data","01_raw"] #"../../data/01_raw/" 
    data_destination_dir: ["data", "02_intermediate"] #"../../data/02_intermediate/"
    encodingtype: ["utf-8","utf-8-sig"]
    logging_dir: ["logs", "data_loader"] #"../../logs/data_loader"
    expected_columns:
        transaction: ["Dine-In Sales", "Dine-In TC", "Takeaway Sales","Takeaway TC","Catering Sales", "Catering TC", "Self-collect Sales",
       "Self-collect TC", "Delivery Sales", "Delivery TC",
       "Aggregator A Sales", "Aggregator A TC", "Aggregator B Sales",
       "Aggregator B TC", "Aggregator C Sales", "Aggregator C TC",
       "Total Total Sales", "Total Total TC"]
        propensity: ["Location", "Factor"]
        campaign: ["Name", "Date Start", "Date End", "Prizes", "TV Ads", "Radio Ads", "Influencers", "Facebook Ads", "Instagram Ads", "Youtube Ads", "Poster Campaigns", "Digital Banners", "Promotions", "Product Launch"]
        climate: ["DIRECTION", "Station", "Year", "Month", "Day",
       "Daily Rainfall Total (mm)", "Highest 30 min Rainfall (mm)",
       "Highest 60 min Rainfall (mm)", "Highest 120 min Rainfall (mm)",
       "Mean Temperature (°C)", "Maximum Temperature (°C)",
       "Minimum Temperature (°C)", "Mean Wind Speed (km/h)",
       "Max Wind Speed (km/h)"]
        covid_record: ["Group size Cap "]
        holiday: ["Date", "School Holiday", "School Holiday Type", "Public Holiday", "Public Holiday Type", "Day"]
        merged_df: ["dine_in_sales", "dine_in_tc", "takeaway_sales", "takeaway_tc",
       "catering_sales", "catering_tc", "self_collect_sales",
       "self_collect_tc", "delivery_sales", "delivery_tc", "agg_A_sales",
       "agg_A_tc", "agg_B_sales", "agg_B_tc", "agg_C_sales", "agg_C_tc",
       "total_sales", "total_tc", "propensity_factor", "cat_weather_station",
       "rain_day_mm", "rain_high_30min_mm", "rain_high_60min_mm",
       "rain_high_120min_mm", "temp_mean", "temp_max", "temp_min",
       "wind_mean_kmh", "wind_max_kmh", "cat_mkt_campaign",
       "cat_covid_group_size_cap", "is_school_holiday", "is_public_holiday",
       "cat_day_of_week"]
    new_column_names:
        transaction: ["dine_in_sales","dine_in_tc","takeaway_sales","takeaway_tc","catering_sales","catering_tc","self_collect_sales","self_collect_tc","delivery_sales","delivery_tc","agg_A_sales","agg_A_tc","agg_B_sales","agg_B_tc","agg_C_sales","agg_C_tc","total_sales","total_tc",]
        propensity: ["Location", "propensity_factor"]
        campaign: ["cat_mkt_campaign", "Date Start", "Date End", "Prizes", "TV Ads", "Radio Ads", "Influencers", "Facebook Ads", "Instagram Ads", "Youtube Ads", "Poster Campaigns", "Digital Banners", "Promotions", "Product Launch"]
        climate: ["DIRECTION","cat_weather_station","Year", "Month", "Day","rain_day_mm","rain_high_30min_mm","rain_high_60min_mm","rain_high_120min_mm","temp_mean","temp_max","temp_min","wind_mean_kmh","wind_max_kmh",]
        covid_record: ["cat_covid_group_size_cap"] 
        holiday: ["Date", "is_school_holiday", "School Holiday Type", "is_public_holiday", "Public Holiday Type", "cat_day_of_week"]

    expected_sheetnames:
        marketing: ["Campaign", "TV Ad", "Radio Ad", "Instagram Ad", "Facebook Ad", "Youtube Ad", "Influencer Engagement", "Poster Campaign", "Digital ", "Promotions", "Product Launch"]
        covid_record: ["Sheet1", "Sheet2"]
        


#Module
data_preprocessing:
    target_feature: "total_sales"
    features_to_bin: ["rain_day_mm", "wind_mean_kmh", "total_sales"]
    data_source_dir: ["data", "02_intermediate"]
    logging_dir: ["logs", "data_preprocessing"]
    data_destination_dir: ["data", "03_primary"]

    # Features that accept positive value only
    non_negative_exogeneous_columns: ["rain_day_mm", "rain_high_30min_mm", "rain_high_60min_mm", "rain_high_120min_mm", "temp_mean", "temp_max", "temp_min", "wind_mean_kmh", "wind_max_kmh"]

    # The expected data types for merged_df
    expected_dtypes:
        dine_in_sales: int64
        dine_in_tc: int64
        takeaway_sales: float64
        takeaway_tc: int64
        catering_sales: float64
        catering_tc: int64
        self_collect_sales: float64
        self_collect_tc: int64
        delivery_sales: float64
        delivery_tc: int64
        agg_A_sale: float64
        agg_A_tc: int64
        agg_B_sales: float64
        agg_B_tc: int64
        agg_C_sales: float64
        agg_C_tc: int64
        total_sales: float64
        total_tc: int64
        propensity_factor: float64
        cat_mkt_campaign: object
        cat_weather_station: object
        rain_day_mm: float64
        rain_high_30min_mm: float64
        rain_high_60min_mm: float64
        rain_high_120min_mm: float64
        temp_mean: float64
        temp_max: float64
        temp_min: float64
        wind_mean_kmh: float64
        wind_max_kmh: float64
        cat_covid_group_size_cap: object
        is_school_holiday: bool
        is_public_holiday: bool
        cat_day_of_week: object

# Next sprint - new imputation - get feedback from PS?
    # expected_imputation:
    #     cat_mkt_campaign: object
    #     cat_weather_station: object
    #     cat_covid_group_size_cap: object
    #     is_school_holiday: object
    #     is_public_holiday: object
    #     cat_day_of_week: object

    transform_approach:
        # Either "Equal Width Binning" "Mean Std Binning" "Equal Frequency Binning"
        total_sales: "Equal Width Binning"
        windspeed_categories: [
            "Calm",
            "Light Air",
            "Light Breeze",
            "Gentle Breeze",
            "Moderate Breeze",
            "Fresh Breeze",
            "Strong Breeze",
            "Near Gale",
            "Gale",
            "Strong Gale",
            "Storm",
            "Violent Storm",
            "Hurricane"
        ]
        windspeed_bins: [0, 1, 6, 12, 20, 29, 39, 50, 62, 75, 89, 103, 118, 999]
        rainfall_categories: [
            "No precipitation", 
            "Low/Moderate precipitation",
            "Heavy precipitation",
            "Extreme precipitation"
        ]        
        rainfall_bins: [0, 1, 10, 50, 999]

#Module
feature_engineering:
    logging_dir: ["logs", "feature_engineering"]
    data_sourc_dir: ["data", "03_primary"]
    data_destination_dir: ["data" ,"04_feature"]

    # Exogenous variable: directly from input dataset
    exog_direct: ['is_school_holiday', 'is_public_holiday', 'cat_day_of_week']
    # Exogenous variable: require binning
    exog_bin: ['rain_day_mm', 'wind_mean_kmh']
    # Binning setup: rain_day_mm
    rain_day_mm:
        bins: [0, 1, 10, 50, 999]
        labels: [
                "No precipitation", 
                "Low/Moderate precipitation",
                "Heavy precipitation",
                "Extreme precipitation"
            ]        
    # Binning setup: wind_mean_kmh
    wind_mean_kmh:
        bins: [0, 1, 6, 12, 20, 29, 39, 50, 62, 75, 89, 103, 118, 999]
        labels: [
                "Calm",
                "Light Air",
                "Light Breeze",
                "Gentle Breeze",
                "Moderate Breeze",
                "Fresh Breeze",
                "Strong Breeze",
                "Near Gale",
                "Gale",
                "Strong Gale",
                "Storm",
                "Violent Storm",
                "Hurricane"
            ]

    endo:
        lag_list_days: [1,2,7]
        window_weeks: [1,2,3,4]
        num_weeks: [1,2,3,4]
#Module
data_split:
    logging_dir: ["logs", "data_split"]
    data_sourc_dir: ["data", "04_feature"]
    data_destination_dir: ["data","05_model_input"]
    split_approach_options: ["train_val_test", "train_test", "timeseries_cross_valiator"]
    split_approach:
        name: "train_val_test" #either train_val_test, train_test or timeseries_cross_valiator
        train_val_test: [60, 20, 20]
        train_test: [80, 20]
        timeseries_cross_validator: 3

